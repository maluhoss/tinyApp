//*MODULES*

//utilizing express for get and post requests
const express = require("express");
const app = express();
const PORT = 8080; // default port 8080

//utilizing bcrypt module to hash password and keep user passwords safe
const bcrypt = require("bcrypt");

//set ejs as view engine so ejs templates rendered for pages can be viewed on browser
app.set("view engine", "ejs");

//utilize cookie-session middleware module to create and destroy encrypted cookies
const cookieSession = require("cookie-session");

//utilize body parser library for getting readable post request body;
const bodyParser = require("body-parser");
app.use(bodyParser.urlencoded({extended: true}));

//use cookie-session module to encrypt cookie with secret keys
app.use(cookieSession({
  name: 'session',
  keys: ['fh28ds'],
  maxAge: 24 * 60 * 60 * 1000 // 24 hours
}));

//*DATABASES*
/*User Database with id, email and password - example added in here, but future user passwords are NOT IN PLAIN TEXT
but encrypted using bcrypt*/
const users = {
  "userRandomID": {
    id: "userRandomID",
    email: "user@example.com",
    password: "purple-monkey-dinosaur"
  },
 "user2RandomID": {
    id: "user2RandomID",
    email: "user2@example.com",
    password: "dishwasher-funk"
  }
};

/*URL Database with alphanumeric shortURL generated by generateRandomString function, with longURL
and and userID that the URL belongs to. EXAMPLES ARE SHOWN*/
const urlDatabase = {
  b6UTxQ: { longURL: "https://www.tsn.ca", user_id: "aJ48lW" },
  i3BoGr: { longURL: "https://www.google.ca", user_id: "aJ48lW" }
};


/*Function that generates a random alphanumeric string; used for generating shortURLs and userID*/
function generateRandomString() {
  const alphabetAndNumbers = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let alphaNumericString = "";
  for (let i = 0; i < 6; i++) {
    let index = Math.floor(Math.random() * alphabetAndNumbers.length);
    alphaNumericString += alphabetAndNumbers[index];
  } return alphaNumericString;
}

/*Function to check if email provided is in the user database. If so, will return the user object
associated with the email; used for login and register page to check if email exists */
function emailExists(email) {
  for (let userId in users) {
    let user = users[userId];
    if (user.email === email) {
      return user;
    };
  };
};

/*Function to check if shortURL exists when viewing specific shortURL page */
function checkUrlExists(providedUrl) {
    for (let url in urlDatabase) {
      if (providedUrl === url) {
        return url;
      };
    };
  };

/*Function to return all URLs associated with a specific userID; used to display
all of the user's URLs on their URLs homepage*/
function urlsForUser(providedId) {
  let userUrls = {};
  for (let shortURL in urlDatabase) {
    let userIdInDatabase = urlDatabase[shortURL].user_id;
    if (providedId === userIdInDatabase) {
      userUrls[shortURL] = { longURL: urlDatabase[shortURL].longURL };
    };
  } return userUrls;
}


//*SPECIFIC ROUTES*

/*Route for GET request for homepage
LOGGED IN USERS: redirected to their URLs homepage with list of their URLs
NON-LOGGED IN USERS: shown login page with email and password */
app.get("/", (req, res) => {
  const loggedInUser = req.session.user_id;

  if (loggedInUser) {
    res.redirect("/urls");
  } else {
    res.redirect("/login");
  };
});

/*Route for GET request for register page
LOGGED IN USERS: redirected to their URLs homepage with list of their URLs;
users detected by presence of unique session cookie created upon registration which which masks real userID attached to their account;
NON-LOGGED IN USERS: shown register page to create account with email and password*/
app.get("/register", (req, res) => {
  if (req.session.user_id) {
    res.redirect("/urls");
  } else {
    res.render("urls_register", { user_id: users[req.session.user_id] });
  };
});

/*Route for GET request for login page
LOGGED IN USERS: redirected to their URLs home page with list of their URLs
NON-LOGGED IN USERS: shown login page for email and password*/
app.get("/login", (req, res) => {
  if (req.session.user_id) {
    res.redirect("/urls");
  } else {
    res.render("urls_login", { user_id: users[req.session.user_id] });
  };
});

/*Route for GET request for URLs home page
LOGGED IN USERS: shown their URLs homepage with list of their URLs
NON-LOGGED IN USERS: only logged in users can have shortURLS, so redirected to login page for email and password*/
app.get("/urls", (req, res) => {
  let loggedInUser = req.session.user_id;

  if (loggedInUser) {
    let templateVars = {
    urls: urlsForUser(req.session.user_id),
    user_id: users[req.session.user_id]
  };
   res.render("urls_index", templateVars);
 } else {
  res.redirect("/login");
 }
});

/*Route for GET request for page to create new URLs
LOGGED IN USERS: shown new url page to create URLs page, by checking for presence of session cookie, created for users
NON-LOGGED IN USERS: Only logged in users can create URLs so directed to login page */

app.get("/urls/new", (req, res) => {
  let loggedInUser = req.session.user_id;

  if (loggedInUser) {
    let templateVars = { user_id: users[req.session.user_id] };
    res.render("urls_new", templateVars);
  } else {
    res.redirect("/login");
  };
});


/*Route for POST request to create new URL and add to URL database - only for registered users
LOGGED IN USERS: if session cookie detected, create shortURL using random string generator function
and add short URL to URL database along with the actual URL (longURL) and userID linked to user
NON-LOGGED IN USERS: cannot create new URLs so redirected to login page*/
app.post("/urls", (req, res) => {
  if (req.session.user_id) {
    const shortURL = generateRandomString();
    urlDatabase[shortURL] = { longURL: req.body.longURL, user_id: req.session.user_id };
    res.redirect(`/urls/${shortURL}`);
  } else {
    res.redirect("/login");
  };
});

/*Route for POST request to login into user account
If email and password match: shown their URLs homepage; unique session cookie linked to user created
If email is not in database or wrong password inputted: redirected to appropriate error message*/
app.post("/login", (req, res) => {
  let email = req.body.email;
  let userEmailInDatabase = emailExists(email);

  if(!userEmailInDatabase) {
    res.send("This email does not exist in our database. Please register or try again.");
  } else {
    const userPasswordInDatabase = userEmailInDatabase.password;
    const userPassword = req.body.password;
    let hashedVsUserPassword = bcrypt.compareSync(userPassword, userPasswordInDatabase);

    if (hashedVsUserPassword === false) {
      res.send("The password is incorrect. Please try again.")
    } else {
      req.session.user_id = userEmailInDatabase.id;
      res.redirect("/urls");
    };
  };
});

//Route for POST request for user to logout - also clears cookie and redirects to urls homepage;
app.post("/logout", (req, res) => {
  req.session = null;
  res.redirect("/urls");
});


/*Route for POST request to create account on register page
If email or password not inputted OR email already registered, directed to error message
If email does not exist in user database, user added to user database with unique ID, email and hashed password;
unique session cookie created*/
app.post("/register", (req, res) => {
  const user_id = generateRandomString();
  const email = req.body.email;
  const password = req.body.password;
  const hashedPassword = bcrypt.hashSync(password, 10);

  if (!email || !password || emailExists(email)) {
    res.send("An email and password is required. If an email and password has been typed in, this email has already been registered.");
  } else {
    users[user_id] = {
      id: user_id,
      email: req.body.email,
      password: hashedPassword
    };
    req.session.user_id = user_id;
    res.redirect("/urls");
  };
});

//*GENERIC ROUTES*
/*Route to display specific shortURL page using route paramater
If URL exists, user is logged in and shortURL belongs to current user, shown specific URL page
If any of these 3 conditions are met, appropriate error messages are displayed*/
app.get("/urls/:shortURL", (req, res) => {
  let shortURL = req.params.shortURL;

  if (checkUrlExists(shortURL) === undefined) {
    res.send("This URL does not exist.");
  } else {
    let userID = req.session.user_id;
    if (userID === undefined) {
      res.send("You are not logged in. Please go to http://localhost:8080/login");
    } else {
      let ownerID = urlDatabase[shortURL].user_id;
      if (userID !== ownerID) {
        res.send("This is not your URL. Please go to http://localhost:8080/urls to see your URLS");
      } else {
        let templateVars = {
          ownerId: urlDatabase[shortURL].user_id,
          user_id: users[req.session.user_id],
          shortURL: shortURL,
          longURL: urlDatabase[shortURL].longURL,
        };
        res.render("urls_show", templateVars);
      };
    };
  };
});

//Route to redirect to actual URL(longURL) - logged in and non-logged in users will be redirected
app.get("/u/:shortURL", (req, res) => {
  const longURL = urlDatabase[req.params.shortURL].longURL;
  res.redirect(longURL);
});

/*Route for POST request to delete shortURL - only for users with unique session cookie
Other users would not be able to delete as would not see specific short URL page plus outsiders cannot
delete it as will not have session cookie*/
app.post("/urls/:shortURL/delete", (req, res) => {
  if (users[req.session.user_id]){
    delete urlDatabase[req.params.shortURL];
    res.redirect("/urls");
  } else {
      res.redirect("/login");
    };
  });


//Route for POST requests to update longURLs attached to shortURLs - only for users with unique session cookie
app.post("/urls/:shortURL", (req, res) => {
  if (users[req.session.user_id]) {
    urlDatabase[req.params.shortURL].longURL = req.body.longURL;
    res.redirect("/urls");
  } else {
    res.redirect("/login");
  };
});

// //route to read urls in json
// app.get("/urls.json", (req, res) => {
//   res.json(urlDatabase);
// });

//server listening for requests
app.listen(PORT, () => {
  console.log(`Example app listening on port ${PORT}!`);
});
